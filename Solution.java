package solutions;
import java.io.*;
import java.math.BigInteger;
import java.util.*;

class Solution {
  
  /* #1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
  Find the sum of all the multiples of 3 or 5 below 1000.*/

  public static int threesAndFives(int input){
    int sum = 0;
    for(int i=0; i < input; i++){
      if(i%3 == 0 || i%5 == 0){
        sum += i;
      }
    }
    return sum;
  }
  
  /* #2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/
  
  public static int evenFibSum(int input){
    int fib1 = 0;
    int fib2 = 1;
    int sum = 0;
    while(fib2 <= input){
      if(fib2 % 2 == 0){
        sum += fib2;
      }
      int temp1 = fib2;
      fib2 = fib1 + fib2;
      fib1 = temp1;
    }
    return sum;
  }
  
  /* #3. The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?*/
  
  public static long largestPrimeFactor(long input){
    TreeSet<Long> primeFactors = new TreeSet<Long>();
    long unfactored = input;
    long current = 0L;
    while(leastPrimeFactor(unfactored)!=-1L){
      current = leastPrimeFactor(unfactored);
      primeFactors.add(current);
      unfactored = unfactored/current;
    }
    primeFactors.add(unfactored);
    return (primeFactors.size()>1 ? primeFactors.last() : -1);
  }
  
  public static long leastPrimeFactor(long input){
    for(long l = 2L; l < input; l++){
      if(input % l == 0 && leastPrimeFactor(l)==-1){
        return l;
      }
    }
    return -1L;
  }
  
  /* #4. A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. 
  Find the largest palindrome made from the product of two 3-digit numbers.*/
  
  public static int largestPalindrome(){
    boolean match = false;
    int i1 = 0, i2 = 0, product = 0, max = 0;
    for(int i = 999; i > 99; i--){
      for(int j = 990; j > 99; j-=11){
        char[] ch = Integer.toString(i*j).toCharArray();
        for(int k = 0; k < ch.length/2; k++){
          if(ch[k] == ch[ch.length-k-1]){
            match = true;
            i1 = i;
            i2 = j;
            product = i*j;
          }
          else{
            match = false;
            break;
          }
        }
        if(match == true){
          if(product > max){
            max = product;
          }
        }
      }
    }
    return max;
  }
  
  /* 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?*/

  public static int smallestMultiple(int[] factors){
    Map<Integer,Integer> factorMap = new HashMap<Integer,Integer>();
    int product = 1;
    for(int i : factors){
      primeFactors(i,factorMap);
    }
    for(Map.Entry<Integer,Integer> entry : factorMap.entrySet()){
      product *= Math.pow(entry.getKey(),entry.getValue());
      System.out.println(entry.getKey() + " " + entry.getValue());
    }
    return product;
  }
  
  public static void primeFactors(long input, Map<Integer,Integer> factorMap){
    long n = input;
    int count = 0;
    for(int i=2; i<=n; i++){
      while(n%i == 0){
        n /= i;
        count++;
      }
      if(count > 0){
        if(factorMap.get(i)!=null && factorMap.get(i) < count){
          factorMap.put(i,count);
        }
        else if(factorMap.get(i) == null){
          factorMap.put(i,count);
        }
      }
      count = 0;
    }
  }
  
  /* #6. The sum of the squares of the first ten natural numbers is,
  12 + 22 + ... + 102 = 385
  The square of the sum of the first ten natural numbers is,
  (1 + 2 + ... + 10)2 = 552 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.*/

  
  public static int sumSquareDiff(){
    int sum = 0;
    for(int i = 1; i <= 99; i++){
      for(int j = i+1; j<=100; j++){
        sum += i*j;
      }
    }
    return 2*sum;
  }
  
  /* #7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10 001st prime number?*/
  
  public static int nthPrime(int input){
    ArrayList<Integer> primes = new ArrayList<Integer>();
    primes.add(2);
    primes.add(3);

    int current = 4;
    
    while(primes.size() < input) {
        if(current % 2 != 0 && current % 3 != 0) {
            int temp = 4;
            while(temp*temp <= current) {
                if(current % temp == 0)
                    break;
                temp ++;
            }
            if(temp*temp > current) {
                primes.add(current);
            }
        }
        current++;
     }

    return primes.get(input-1);
    }
  
  /* #8. The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
  Find the thirteen adjacent digits in the 1000-digit number (called int[] nums) that have the greatest product. What is the value of this product?*/
  
  public static long adjacentNums(){
	  int maxI = 0, maxJ = 12;
	  long max = 0, product = 1;
	  int[] nums = {7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,
			  9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,
			  8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,
			  1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,
			  6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,
			  6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,
			  3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,
			  7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,
			  6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,
			  5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,
			  5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,
			  8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,
			  8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,
			  1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,
			  1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,
			  2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,
			  0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,
			  8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,
			  0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,
			  7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0};
	  int i=0, j=13;
	  while(j < nums.length){
		  product = 1;
		  for(int k = i; k < j; k++){
			  if(nums[k] == 0){
				  break;
			  }
			  else{
				  product *= nums[k];
			  }
		  }
		  if(product > max){
			  max = product;
			  maxI = i;
			  maxJ = j;
		  }
		  i++;
		  j++;
	  }
	  for(int output = maxI; output < maxJ; output++){
		  System.out.print(nums[output] + " ");
	  }
	  System.out.println();
	  return max;
  }
  
  /* #9. A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
  a^2 + b^2 = c^2
  For example, 32 + 42 = 9 + 16 = 25 = 52.
  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product abc.*/

  
  public static int pythagorean(){
	  for(int a = 0; a < 997; a++){
		  for(int b = a+1; b < 998; b++){
			  for(int c = b+1; c < 999; c++){
				  if(Math.pow(a,2) + Math.pow(b,2) == Math.pow(c,2) && a+b+c == 1000){
					  System.out.println(a + " " + b + " " + c);
					  return a * b * c;
				  }
			  }
		  }
	  }
	  return -1;
  }
  
  /* #10. The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.*/
  
  public static long sumOfPrimes(){
	  int n = 2000000;
	  long sum = 0;
	  boolean[] nums = new boolean[n];
	  for(int i = 0; i < nums.length; i++){
		  nums[i] = true;
	  }
	  nums[0] = false;
	  nums[1] = false;
	  int p = 2;
	  while( p < n ){
		  sum += p;
		  for(int i = p*2; i < nums.length; i+=p){
			  nums[i] = false;
		  }
		  for(int next = p+1; next <= nums.length; next++){
			  if(next == nums.length){
				  p = next;
			  }
			  else if(nums[next] == true){
				  p = next;
				  break;
			  }
		  }
	  }
	  return sum;
  }
  
  //To view the solution and run time in milliseconds, uncomment the corresponding method call.
  
  public static void main(String[] args) {
    long startTime = System.nanoTime();
    //System.out.println(threesAndFives(1000));
    //System.out.println(evenFibSum(4000000));
    //System.out.println(largestPrimeFactor(600851475143L));
    //System.out.println(largestPalindrome());
    //System.out.println(smallestMultiple(new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}));
    //System.out.println(sumSquareDiff());
    //System.out.println(nthPrime(10001));
    //System.out.println(adjacentNums());
    //System.out.println(pythagorean());
    //System.out.println(sumOfPrimes());
    long endTime = System.nanoTime();
    System.out.println("Took "+(endTime - startTime)/1000000 + " ms"); 
  }
  
}
